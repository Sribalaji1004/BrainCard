"use strict";

var fs = require('fs');
var path = require('path');
var program = require('commander');
var mkdirp = require('mkdirp');
var glob = require('glob');
var index_1 = require('./index');
var pkg = require('../package.json');
// <hoge> is reuired, [hoge] is optional
program.version(pkg.version).usage('[options] <file ... | file patterns using node-glob>').option('-o, --out [file]', 'output d.ts filename.').option('-p, --prefix [type prefix]', 'set the prefix of interface name. default is nothing.').parse(process.argv);
var opts = program;
if (opts.args.length === 0) {
    readSchemasFromStdin(processGenerate);
} else {
    readSchemasFromFiles(processGenerate);
}
function readSchemasFromStdin(callback) {
    var data = '';
    process.stdin.setEncoding('utf-8');
    process.stdin.on('readable', function () {
        var chunk = void 0;
        while (chunk = process.stdin.read()) {
            if (typeof chunk === 'string') {
                data += chunk;
            }
        }
    });
    process.stdin.on('end', function () {
        var schemas = JSON.parse(data);
        if (!Array.isArray(schemas)) {
            schemas = [schemas];
        }
        callback(null, schemas);
    });
}
function readSchemasFromFiles(callback) {
    var promises = [];
    opts.args.forEach(function (arg) {
        var files = glob.sync(arg);
        promises = promises.concat(files.map(function (file) {
            return new Promise(function (resolve, reject) {
                fs.readFile(file, { encoding: 'utf-8' }, function (err, content) {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(JSON.parse(content));
                    }
                });
            });
        }));
    });
    Promise.all(promises).then(function (schemas) {
        callback(null, schemas);
    }).catch(function (err) {
        callback(err, []);
    });
}
function processGenerate(err, schemas) {
    if (err) {
        throw err;
    }
    index_1.default(schemas, opts.prefix).then(function (result) {
        if (opts.out) {
            mkdirp.sync(path.dirname(opts.out));
            fs.writeFileSync(opts.out, result, { encoding: 'utf-8' });
        } else {
            console.log(result);
        }
    }).catch(function (e) {
        console.error(e.stack || e);
    });
}
//# sourceMappingURL=cli.js.map
