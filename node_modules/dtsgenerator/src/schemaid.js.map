{"version":3,"sources":["src/schemaid.js","src/schemaid.ts"],"names":[],"mappings":"AAAA;;;;;;ACAA,IAAY,MAAG,QAAM,KAAN,CAAf;AACA,IAAA,gBAAA,QAAsB,eAAtB,CAAA;AACA,IAAA,UAAA,QAA2B,SAA3B,CAAA;;IAEA,Q;AAII,sBAAY,EAAZ,EAAwB,SAAxB,EAA4C;AAAA;;AAAA;;AACxC,aAAK,UAAL,GAAkB,EAAlB;AACA,YAAI,SAAJ,EAAe;AACX,sBAAU,OAAV,CAAkB,UAAC,MAAD,EAAe;AAC7B,oBAAI,MAAJ,EAAY;AACR,0BAAK,UAAL,GAAkB,IAAI,OAAJ,CAAY,MAAZ,EAAoB,MAAK,UAAzB,CAAlB;AACH;AACJ,aAJD;AAKH;AACD,YAAI,KAAK,UAAL,CAAgB,OAAhB,CAAwB,GAAxB,IAA+B,CAAnC,EAAsC;AAClC,iBAAK,UAAL,IAAmB,GAAnB;AACH;AACD,YAAI,KAAK,UAAL,CAAgB,OAAhB,CAAwB,KAAxB,IAAiC,CAAjC,IAAsC,KAAK,UAAL,CAAgB,CAAhB,MAAuB,GAA7D,IAAoE,KAAK,UAAL,CAAgB,CAAhB,MAAuB,GAA/F,EAAoG;AAChG,iBAAK,UAAL,GAAkB,MAAM,KAAK,UAA7B;AACH;AACD,aAAK,MAAL,GAAc,IAAI,KAAJ,CAAU,KAAK,UAAf,CAAd;AACH;;;;wCAEmB;AAChB,mBAAO,KAAK,UAAZ;AACH;;;sCACiB;AACd,mBAAO,gBAAe,IAAf,CAAoB,KAAK,UAAzB;AAAP;AACH;;;oCACe;AACZ,mBAAO,KAAK,UAAL,CAAgB,OAAhB,CAAwB,MAAxB,EAAgC,GAAhC,CAAP;AACH;;;4CACuB;AACpB,mBAAO,KAAK,UAAL,KAAoB,GAApB,IAA2B,MAAM,IAAN,CAAW,KAAK,UAAhB,CAAlC;AACH;;;6CACwB;AACrB,gBAAM,IAAI,WAAW,IAAX,CAAgB,KAAK,UAArB,CAAV;AACA,gBAAI,KAAK,IAAT,EAAe;AACX,uBAAO,EAAP;AACH;AACD,mBAAO,cAAA,KAAA,CAAM,EAAE,CAAF,CAAN,CAAP;AACH;;;uCAEkB;AACf,gBAAM,MAAgB,EAAtB;AACA,gBAAI,KAAK,MAAL,CAAY,IAAhB,EAAsB;AAClB,oBAAI,IAAJ,CAAS,mBAAmB,KAAK,MAAL,CAAY,IAA/B,CAAT;AACH;AACD,gBAAM,cAAc,SAAd,WAAc,CAAC,IAAD,EAAa;AAC7B,oBAAM,QAAQ,KAAK,KAAL,CAAW,GAAX,CAAd;AACA,oBAAI,MAAM,MAAN,GAAe,CAAf,IAAoB,MAAM,CAAN,MAAa,EAArC,EAAyC;AACrC,0BAAM,KAAN;AACH;AACD,sBAAM,OAAN,CAAc,UAAC,IAAD,EAAa;AACvB,wBAAI,IAAJ,CAAS,mBAAmB,IAAnB,CAAT;AACH,iBAFD;AAGH,aARD;AASA,gBAAI,KAAK,MAAL,CAAY,QAAhB,EAA0B;AACtB,4BAAY,KAAK,MAAL,CAAY,QAAxB;AACH;AACD,gBAAI,KAAK,MAAL,CAAY,IAAZ,IAAoB,KAAK,MAAL,CAAY,IAAZ,CAAiB,MAAjB,GAA0B,CAAlD,EAAqD;AACjD,4BAAY,KAAK,MAAL,CAAY,IAAZ,CAAiB,MAAjB,CAAwB,CAAxB,CAAZ;AACH;AACD,mBAAO,IAAI,GAAJ,CAAQ,QAAA,UAAR,CAAP;AACH;;;2CACsB;AACnB,gBAAM,QAAQ,KAAK,YAAL,EAAd;AACA,mBAAO,MAAM,MAAM,MAAN,GAAe,CAArB,CAAP;AACH;;;;;;AAnEQ,QAAA,QAAA,GAAQ,QAAR","file":"src/schemaid.js","sourcesContent":["\"use strict\";\nconst url = require('url');\nconst jsonPointer_1 = require('./jsonPointer');\nconst utils_1 = require('./utils');\nclass SchemaId {\n    constructor(id, parentIds) {\n        this.absoluteId = id;\n        if (parentIds) {\n            parentIds.forEach((parent) => {\n                if (parent) {\n                    this.absoluteId = url.resolve(parent, this.absoluteId);\n                }\n            });\n        }\n        if (this.absoluteId.indexOf('#') < 0) {\n            this.absoluteId += '#';\n        }\n        if (this.absoluteId.indexOf('://') < 0 && this.absoluteId[0] !== '/' && this.absoluteId[0] !== '#') {\n            this.absoluteId = '/' + this.absoluteId;\n        }\n        this.baseId = url.parse(this.absoluteId);\n    }\n    getAbsoluteId() {\n        return this.absoluteId;\n    }\n    isFetchable() {\n        return /https?\\:\\/\\//.test(this.absoluteId);\n    }\n    getFileId() {\n        return this.absoluteId.replace(/#.*$/, '#');\n    }\n    isJsonPointerHash() {\n        return this.absoluteId === '#' || /#\\//.test(this.absoluteId);\n    }\n    getJsonPointerHash() {\n        const m = /#(\\/.*)$/.exec(this.absoluteId);\n        if (m == null) {\n            return [];\n        }\n        return jsonPointer_1.parse(m[1]);\n    }\n    getTypeNames() {\n        const ids = [];\n        if (this.baseId.host) {\n            ids.push(decodeURIComponent(this.baseId.host));\n        }\n        const addAllParts = (path) => {\n            const paths = path.split('/');\n            if (paths.length > 1 && paths[0] === '') {\n                paths.shift();\n            }\n            paths.forEach((item) => {\n                ids.push(decodeURIComponent(item));\n            });\n        };\n        if (this.baseId.pathname) {\n            addAllParts(this.baseId.pathname);\n        }\n        if (this.baseId.hash && this.baseId.hash.length > 1) {\n            addAllParts(this.baseId.hash.substr(1));\n        }\n        return ids.map(utils_1.toTypeName);\n    }\n    getInterfaceName() {\n        const names = this.getTypeNames();\n        return names[names.length - 1];\n    }\n}\nexports.SchemaId = SchemaId;\n","import * as url from 'url';\nimport { parse } from './jsonPointer';\nimport { toTypeName } from './utils';\n\nexport class SchemaId {\n    private baseId: url.Url;\n    private absoluteId: string;\n\n    constructor(id: string, parentIds?: string[]) {\n        this.absoluteId = id;\n        if (parentIds) {\n            parentIds.forEach((parent: string) => {\n                if (parent) {\n                    this.absoluteId = url.resolve(parent, this.absoluteId);\n                }\n            });\n        }\n        if (this.absoluteId.indexOf('#') < 0) {\n            this.absoluteId += '#';\n        }\n        if (this.absoluteId.indexOf('://') < 0 && this.absoluteId[0] !== '/' && this.absoluteId[0] !== '#') {\n            this.absoluteId = '/' + this.absoluteId;\n        }\n        this.baseId = url.parse(this.absoluteId);\n    }\n\n    public getAbsoluteId(): string {\n        return this.absoluteId;\n    }\n    public isFetchable(): boolean {\n        return /https?\\:\\/\\//.test(this.absoluteId);\n    }\n    public getFileId(): string {\n        return this.absoluteId.replace(/#.*$/, '#');\n    }\n    public isJsonPointerHash(): boolean {\n        return this.absoluteId === '#' || /#\\//.test(this.absoluteId);\n    }\n    public getJsonPointerHash(): string[] {\n        const m = /#(\\/.*)$/.exec(this.absoluteId);\n        if (m == null) {\n            return [];\n        }\n        return parse(m[1]);\n    }\n\n    public getTypeNames(): string[] {\n        const ids: string[] = [];\n        if (this.baseId.host) {\n            ids.push(decodeURIComponent(this.baseId.host));\n        }\n        const addAllParts = (path: string): void => {\n            const paths = path.split('/');\n            if (paths.length > 1 && paths[0] === '') {\n                paths.shift();\n            }\n            paths.forEach((item: string) => {\n                ids.push(decodeURIComponent(item));\n            });\n        };\n        if (this.baseId.pathname) {\n            addAllParts(this.baseId.pathname);\n        }\n        if (this.baseId.hash && this.baseId.hash.length > 1) {\n            addAllParts(this.baseId.hash.substr(1));\n        }\n        return ids.map(toTypeName);\n    }\n    public getInterfaceName(): string {\n        const names = this.getTypeNames();\n        return names[names.length - 1];\n    }\n}\n\n"],"sourceRoot":"/source/"}