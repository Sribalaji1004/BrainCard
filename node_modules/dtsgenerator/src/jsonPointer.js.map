{"version":3,"sources":["src/jsonPointer.js","src/jsonPointer.ts"],"names":[],"mappings":"AAAA;;ACCA,SAAA,GAAA,CAAoB,GAApB,EAA8B,IAA9B,EAA4C;AACxC,QAAI,KAAK,MAAL,KAAgB,CAApB,EAAuB;AACnB,eAAO,GAAP;AACH;AACD,QAAI,IAAI,GAAR;AACA,QAAM,UAAU,KAAK,KAAK,MAAL,GAAc,CAAnB,CAAhB;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAL,GAAc,CAAlC,EAAqC,GAArC,EAA0C;AACtC,YAAM,MAAM,KAAK,CAAL,CAAZ;AACA,YAAM,OAAO,EAAE,GAAF,CAAb;AACA,YAAI,QAAQ,IAAZ,EAAkB;AACd,mBAAO,SAAP;AACH;AACD,YAAI,IAAJ;AACH;AACD,WAAO,EAAE,OAAF,CAAP;AACH;AAfe,QAAA,GAAA,GAAG,GAAH;AAiBhB,SAAA,GAAA,CAAoB,GAApB,EAA8B,IAA9B,EAA8C,KAA9C,EAAwD;AACpD,QAAI,KAAK,MAAL,KAAgB,CAApB,EAAuB;AACnB;AACH;AACD,QAAI,IAAI,GAAR;AACA,QAAM,UAAU,KAAK,KAAK,MAAL,GAAc,CAAnB,CAAhB;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAL,GAAc,CAAlC,EAAqC,GAArC,EAA0C;AACtC,YAAM,MAAM,KAAK,CAAL,CAAZ;AACA,YAAI,OAAO,EAAE,GAAF,CAAX;AACA,YAAI,QAAQ,IAAZ,EAAkB;AACd,mBAAO,EAAP;AACA,cAAE,GAAF,IAAS,IAAT;AACH;AACD,YAAI,IAAJ;AACH;AACD,MAAE,OAAF,IAAa,KAAb;AACH;AAhBe,QAAA,GAAA,GAAG,GAAH;AAkBhB,SAAA,KAAA,CAAsB,CAAtB,EAA+B;AAC3B,QAAM,OAAO,EAAE,KAAF,CAAQ,GAAR,CAAb;AACA,QAAI,KAAK,KAAL,OAAiB,EAArB,EAAyB;AACrB,cAAM,IAAI,KAAJ,CAAU,kCAAkC,CAA5C,CAAN;AACH;AACD,WAAO,KAAK,GAAL,CAAS,UAAC,GAAD;AAAA,eAAS,QAAQ,GAAR,CAAT;AAAA,KAAT,CAAP;AACH;AANe,QAAA,KAAA,GAAK,KAAL;AAQhB,SAAA,OAAA,CAAiB,GAAjB,EAA4B;AACxB,WAAO,IAAI,OAAJ,CAAY,SAAZ,EAAuB,UAAC,KAAD,EAAM;AAChC,gBAAQ,KAAR;AACI,iBAAK,IAAL;AAAW,uBAAO,GAAP;AACX,iBAAK,IAAL;AAAW,uBAAO,GAAP;AACX;AAAS,sBAAM,IAAI,KAAJ,CAAU,4BAAV,CAAN;AAHb;AAKH,KANM,CAAP;AAOH","file":"src/jsonPointer.js","sourcesContent":["\"use strict\";\nfunction get(obj, path) {\n    if (path.length === 0) {\n        return obj;\n    }\n    let o = obj;\n    const lastKey = path[path.length - 1];\n    for (let i = 0; i < path.length - 1; i++) {\n        const key = path[i];\n        const next = o[key];\n        if (next == null) {\n            return undefined;\n        }\n        o = next;\n    }\n    return o[lastKey];\n}\nexports.get = get;\nfunction set(obj, path, value) {\n    if (path.length === 0) {\n        return;\n    }\n    let o = obj;\n    const lastKey = path[path.length - 1];\n    for (let i = 0; i < path.length - 1; i++) {\n        const key = path[i];\n        let next = o[key];\n        if (next == null) {\n            next = {};\n            o[key] = next;\n        }\n        o = next;\n    }\n    o[lastKey] = value;\n}\nexports.set = set;\nfunction parse(s) {\n    const path = s.split('/');\n    if (path.shift() !== '') {\n        throw new Error('Invalid JSON-Pointer format: ' + s);\n    }\n    return path.map((key) => untilde(key));\n}\nexports.parse = parse;\nfunction untilde(key) {\n    return key.replace(/~(0|1)/g, (match) => {\n        switch (match) {\n            case '~0': return '~';\n            case '~1': return '/';\n            default: throw new Error('Unsupported tilded number.');\n        }\n    });\n}\n","\nexport function get(obj: any, path: string[]): any {\n    if (path.length === 0) {\n        return obj;\n    }\n    let o = obj;\n    const lastKey = path[path.length - 1];\n    for (let i = 0; i < path.length - 1; i++) {\n        const key = path[i];\n        const next = o[key];\n        if (next == null) {\n            return undefined;\n        }\n        o = next;\n    }\n    return o[lastKey];\n}\n\nexport function set(obj: any, path: string[], value: any): void {\n    if (path.length === 0) {\n        return;\n    }\n    let o = obj;\n    const lastKey = path[path.length - 1];\n    for (let i = 0; i < path.length - 1; i++) {\n        const key = path[i];\n        let next = o[key];\n        if (next == null) {\n            next = {};\n            o[key] = next;\n        }\n        o = next;\n    }\n    o[lastKey] = value;\n}\n\nexport function parse(s: string): string[] {\n    const path = s.split('/');\n    if (path.shift() !== '') {\n        throw new Error('Invalid JSON-Pointer format: ' + s);\n    }\n    return path.map((key) => untilde(key));\n}\n\nfunction untilde(key: string): string {\n    return key.replace(/~(0|1)/g, (match) => {\n        switch (match) {\n            case '~0': return '~';\n            case '~1': return '/';\n            default: throw new Error('Unsupported tilded number.');\n        }\n    });\n}\n"],"sourceRoot":"/source/"}